apiVersion: v1
data:
  movie_pb2_grpc.py: |
    # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
    """Client and server classes corresponding to protobuf-defined services."""
    import grpc
    import warnings

    import movie_pb2 as movie__pb2

    GRPC_GENERATED_VERSION = '1.71.0'
    GRPC_VERSION = grpc.__version__
    _version_not_supported = False

    try:
        from grpc._utilities import first_version_is_lower
        _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
    except ImportError:
        _version_not_supported = True

    if _version_not_supported:
        raise RuntimeError(
            f'The grpc package installed is at version {GRPC_VERSION},'
            + f' but the generated code in movie_pb2_grpc.py depends on'
            + f' grpcio>={GRPC_GENERATED_VERSION}.'
            + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
            + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        )


    class MovieServiceStub(object):
        """Missing associated documentation comment in .proto file."""

        def __init__(self, channel):
            """Constructor.

            Args:
                channel: A grpc.Channel.
            """
            self.GetAllMovies = channel.unary_unary(
                    '/movie.MovieService/GetAllMovies',
                    request_serializer=movie__pb2.Empty.SerializeToString,
                    response_deserializer=movie__pb2.MovieList.FromString,
                    _registered_method=True)
            self.GetRandomMovie = channel.unary_unary(
                    '/movie.MovieService/GetRandomMovie',
                    request_serializer=movie__pb2.Empty.SerializeToString,
                    response_deserializer=movie__pb2.Movie.FromString,
                    _registered_method=True)
            self.CreateMovie = channel.unary_unary(
                    '/movie.MovieService/CreateMovie',
                    request_serializer=movie__pb2.Movie.SerializeToString,
                    response_deserializer=movie__pb2.Empty.FromString,
                    _registered_method=True)
            self.GetMovieById = channel.unary_unary(
                    '/movie.MovieService/GetMovieById',
                    request_serializer=movie__pb2.MovieRequest.SerializeToString,
                    response_deserializer=movie__pb2.Movie.FromString,
                    _registered_method=True)


    class MovieServiceServicer(object):
        """Missing associated documentation comment in .proto file."""

        def GetAllMovies(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def GetRandomMovie(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def CreateMovie(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def GetMovieById(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')


    def add_MovieServiceServicer_to_server(servicer, server):
        rpc_method_handlers = {
                'GetAllMovies': grpc.unary_unary_rpc_method_handler(
                        servicer.GetAllMovies,
                        request_deserializer=movie__pb2.Empty.FromString,
                        response_serializer=movie__pb2.MovieList.SerializeToString,
                ),
                'GetRandomMovie': grpc.unary_unary_rpc_method_handler(
                        servicer.GetRandomMovie,
                        request_deserializer=movie__pb2.Empty.FromString,
                        response_serializer=movie__pb2.Movie.SerializeToString,
                ),
                'CreateMovie': grpc.unary_unary_rpc_method_handler(
                        servicer.CreateMovie,
                        request_deserializer=movie__pb2.Movie.FromString,
                        response_serializer=movie__pb2.Empty.SerializeToString,
                ),
                'GetMovieById': grpc.unary_unary_rpc_method_handler(
                        servicer.GetMovieById,
                        request_deserializer=movie__pb2.MovieRequest.FromString,
                        response_serializer=movie__pb2.Movie.SerializeToString,
                ),
        }
        generic_handler = grpc.method_handlers_generic_handler(
                'movie.MovieService', rpc_method_handlers)
        server.add_generic_rpc_handlers((generic_handler,))
        server.add_registered_method_handlers('movie.MovieService', rpc_method_handlers)


     # This class is part of an EXPERIMENTAL API.
    class MovieService(object):
        """Missing associated documentation comment in .proto file."""

        @staticmethod
        def GetAllMovies(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/movie.MovieService/GetAllMovies',
                movie__pb2.Empty.SerializeToString,
                movie__pb2.MovieList.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def GetRandomMovie(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/movie.MovieService/GetRandomMovie',
                movie__pb2.Empty.SerializeToString,
                movie__pb2.Movie.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def CreateMovie(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/movie.MovieService/CreateMovie',
                movie__pb2.Movie.SerializeToString,
                movie__pb2.Empty.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def GetMovieById(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/movie.MovieService/GetMovieById',
                movie__pb2.MovieRequest.SerializeToString,
                movie__pb2.Movie.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: frontend
  name: frontend-cm4
