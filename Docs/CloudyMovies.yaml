openapi: 3.0.0
info:
  title: "Cloudy Movie | A Browser Game"
  description: "An API about an app where you will be able to play a higher/lower game about letterboxd ratings of movies. The best way to test this game is via the browser, since we utilize a frontend to call the methods."
  version: "1.0.0"

servers:
  - url: "/CloudyMovies"
  
components:
  schemas:
    GameMovieDetails:
      type: "object"
      required:
        - title
        - rating
      properties:
        tagline:
          type: "string"
        duration:
          type: "integer"
        title:
          type: "string"
        year:
          type: "integer"
        movieId:
          type: "integer"
        poster:
          type: "string"
        rating:
          type: "number"
    
    Movie:
      type: "object"
      required:
        - movie
      properties:
        movie:
          type: "object"
          items:
            $ref : '#/components/schemas/GameMovieDetails'
        description:
          type: "string"
        crew:
          type: "array"
          items:
            $ref: '#/components/schemas/People'
          minLength: 1
          maxLength: 3
        genre:
          type: "array"
          items:
            $ref: '#/components/schemas/Genre'
          minLength: 1
          maxLength: 3
        studios:
          type: "array"
          items:
            type: "string"
          minLength: 1
          maxLength: 3
        themes:
          type: "array"
          items:
            $ref: '#/components/schemas/Theme'
          minLength: 1
          maxLength: 3
        actors:
          type: "array"
          items:
            $ref: '#/components/schemas/People'
          minLength: 1
          maxLength: 5

    People:
      type: "object"
      properties:
        name:
          type: "string"
        role:
          type: "string"
    
    Theme:
      type: "object"
      properties:
        desc:
          type: "string"
    
    Genre:
      type: "object"
      properties:
        desc:
          type: "string"
    
    Account:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        highScore:
          type: "integer"
        account_type:
          type: "string"
    
    Tournament:
      type: "object"
      properties:
        date:
          type: "string"
        name:
          type: "string"
        creator:
          type: "string"
        prize:
          type: "integer"
        players:
          type: "array"
          items:
            $ref: '#/components/schemas/Account'
          minLength: 1
          maxLength: 5

  parameters:
    id:
      name: "id"
      description: "Id of movie"
      in: path
      required: true
      schema:
        type: "integer"
    
    id_account:
      name: "id"
      description: "Id of account"
      in: path
      required: true
      schema:
        type: "integer"
    
    id_tournament:
      name: "id"
      description: "Id of tournament"
      in: path
      required: true
      schema:
        type: "integer"  

paths:
  /:
    get:
      operationId: "frontend.home"
      tags:
        - "Frontend"
      summary: "Returns initial login page"
      responses:
        "200":
          description: "Successfully loaded first page"


  /submit:
    post:
      operationId: "frontend.createAccount"
      tags:
        - "Frontend"
      summary: "Create an Account"
      responses:
        "201":
          description: "Successfully created account"
      requestBody:
        description: "Account to create"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
                account_type:
                  type: "string"

  /updateHighScore:
    post:
      operationId: "frontend.updateHighScore"
      tags:
        - "Frontend"
      summary: "Update Account's highscore"
      responses:
        "201":
          description: "Successfully updated account's high score"
      requestBody:
        description: "Account to update"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                highscore:
                  type: "integer"

  /get/{id}:
    get:
      tags:
        - "Frontend"
      operationId: "frontend.getMovieById"
      summary: "Load page of movie"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully got html Movie page"

  /getRandom:
    get:
      tags:
        - "Frontend"
      operationId: "frontend.getRandomMovie"
      summary: "Get a Movie"
      responses:
        "200":
          description: "Successfully got Movie"
          content:
            application/json:
              schema:
                type: "object"
                properties:              
                  movieId:
                    type: "integer"
                  title:
                    type: "string"
                  poster:
                    type: "string"
                  rating:
                    type: "number"               
                  year:
                    type: "integer"

  /getTwoRandom:
    get:
      tags:
        - "Frontend"
      operationId: "frontend.getTwoRandomMovies"
      summary: "Load page with two random movies"
      responses:
        "200":
          description: "Successfully html loaded page displaying 2 random movies"

  /getTournaments:
    get:
      tags:
        - "Frontend"
      operationId: "frontend.getTournaments"
      summary: "Get the list of all Tournaments"
      responses:
        "200":
          description: "Successfully retrieved Tournaments list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Tournament"

  /createTournament:
    post:
      operationId: "frontend.createTournament"
      tags:
        - "Frontend"
      summary: "Create a Tournament"
      responses:
        "201":
          description: "Tournament Created"
      requestBody:
        description: "Tournament to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tournament"  

  /joinTournament:              
    post:
      operationId: "frontend.joinTournament"
      tags:
        - "Frontend"      
      summary: "Join a Tournament"
      requestBody:
        description: "Tournament to join"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                tournamentId:
                  type: "integer"
                username:
                  type: "string"
      responses:
        "201":
          description: "Joined Tournament"

  /account/{username}:
    get:
      operationId: "frontend.getAccountByUsername"
      tags:
        - "Frontend"
      summary: "Get an html page with Account info"
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully got Account"