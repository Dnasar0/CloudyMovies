apiVersion: v1
data:
  tournament_pb2_grpc.py: |
    # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
    """Client and server classes corresponding to protobuf-defined services."""
    import grpc
    import warnings

    import tournament_pb2 as tournament__pb2

    GRPC_GENERATED_VERSION = '1.71.0'
    GRPC_VERSION = grpc.__version__
    _version_not_supported = False

    try:
        from grpc._utilities import first_version_is_lower
        _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
    except ImportError:
        _version_not_supported = True

    if _version_not_supported:
        raise RuntimeError(
            f'The grpc package installed is at version {GRPC_VERSION},'
            + f' but the generated code in tournament_pb2_grpc.py depends on'
            + f' grpcio>={GRPC_GENERATED_VERSION}.'
            + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
            + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        )


    class TournamentServiceStub(object):
        """Missing associated documentation comment in .proto file."""

        def __init__(self, channel):
            """Constructor.

            Args:
                channel: A grpc.Channel.
            """
            self.CreateTournament = channel.unary_unary(
                    '/tournament.TournamentService/CreateTournament',
                    request_serializer=tournament__pb2.Tournament.SerializeToString,
                    response_deserializer=tournament__pb2.Empty.FromString,
                    _registered_method=True)
            self.GetTournament = channel.unary_unary(
                    '/tournament.TournamentService/GetTournament',
                    request_serializer=tournament__pb2.TournamentId.SerializeToString,
                    response_deserializer=tournament__pb2.Tournament.FromString,
                    _registered_method=True)
            self.UpdateTournament = channel.unary_unary(
                    '/tournament.TournamentService/UpdateTournament',
                    request_serializer=tournament__pb2.Tournament.SerializeToString,
                    response_deserializer=tournament__pb2.Empty.FromString,
                    _registered_method=True)
            self.DeleteTournament = channel.unary_unary(
                    '/tournament.TournamentService/DeleteTournament',
                    request_serializer=tournament__pb2.TournamentId.SerializeToString,
                    response_deserializer=tournament__pb2.Empty.FromString,
                    _registered_method=True)
            self.ListTournaments = channel.unary_unary(
                    '/tournament.TournamentService/ListTournaments',
                    request_serializer=tournament__pb2.Empty.SerializeToString,
                    response_deserializer=tournament__pb2.TournamentList.FromString,
                    _registered_method=True)
            self.JoinTournament = channel.unary_unary(
                    '/tournament.TournamentService/JoinTournament',
                    request_serializer=tournament__pb2.JoinTournamentRequest.SerializeToString,
                    response_deserializer=tournament__pb2.Empty.FromString,
                    _registered_method=True)


    class TournamentServiceServicer(object):
        """Missing associated documentation comment in .proto file."""

        def CreateTournament(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def GetTournament(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def UpdateTournament(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def DeleteTournament(self, request, context):
            """Missing associated documentation comment in .proto file."""
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def ListTournaments(self, request, context):
            """Fetch all tournaments
            """
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def JoinTournament(self, request, context):
            """Add player to a tournament
            """
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')


    def add_TournamentServiceServicer_to_server(servicer, server):
        rpc_method_handlers = {
                'CreateTournament': grpc.unary_unary_rpc_method_handler(
                        servicer.CreateTournament,
                        request_deserializer=tournament__pb2.Tournament.FromString,
                        response_serializer=tournament__pb2.Empty.SerializeToString,
                ),
                'GetTournament': grpc.unary_unary_rpc_method_handler(
                        servicer.GetTournament,
                        request_deserializer=tournament__pb2.TournamentId.FromString,
                        response_serializer=tournament__pb2.Tournament.SerializeToString,
                ),
                'UpdateTournament': grpc.unary_unary_rpc_method_handler(
                        servicer.UpdateTournament,
                        request_deserializer=tournament__pb2.Tournament.FromString,
                        response_serializer=tournament__pb2.Empty.SerializeToString,
                ),
                'DeleteTournament': grpc.unary_unary_rpc_method_handler(
                        servicer.DeleteTournament,
                        request_deserializer=tournament__pb2.TournamentId.FromString,
                        response_serializer=tournament__pb2.Empty.SerializeToString,
                ),
                'ListTournaments': grpc.unary_unary_rpc_method_handler(
                        servicer.ListTournaments,
                        request_deserializer=tournament__pb2.Empty.FromString,
                        response_serializer=tournament__pb2.TournamentList.SerializeToString,
                ),
                'JoinTournament': grpc.unary_unary_rpc_method_handler(
                        servicer.JoinTournament,
                        request_deserializer=tournament__pb2.JoinTournamentRequest.FromString,
                        response_serializer=tournament__pb2.Empty.SerializeToString,
                ),
        }
        generic_handler = grpc.method_handlers_generic_handler(
                'tournament.TournamentService', rpc_method_handlers)
        server.add_generic_rpc_handlers((generic_handler,))
        server.add_registered_method_handlers('tournament.TournamentService', rpc_method_handlers)


     # This class is part of an EXPERIMENTAL API.
    class TournamentService(object):
        """Missing associated documentation comment in .proto file."""

        @staticmethod
        def CreateTournament(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/CreateTournament',
                tournament__pb2.Tournament.SerializeToString,
                tournament__pb2.Empty.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def GetTournament(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/GetTournament',
                tournament__pb2.TournamentId.SerializeToString,
                tournament__pb2.Tournament.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def UpdateTournament(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/UpdateTournament',
                tournament__pb2.Tournament.SerializeToString,
                tournament__pb2.Empty.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def DeleteTournament(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/DeleteTournament',
                tournament__pb2.TournamentId.SerializeToString,
                tournament__pb2.Empty.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def ListTournaments(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/ListTournaments',
                tournament__pb2.Empty.SerializeToString,
                tournament__pb2.TournamentList.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)

        @staticmethod
        def JoinTournament(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
            return grpc.experimental.unary_unary(
                request,
                target,
                '/tournament.TournamentService/JoinTournament',
                tournament__pb2.JoinTournamentRequest.SerializeToString,
                tournament__pb2.Empty.FromString,
                options,
                channel_credentials,
                insecure,
                call_credentials,
                compression,
                wait_for_ready,
                timeout,
                metadata,
                _registered_method=True)
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: tournament-service
  name: tournament-service-cm2
