apiVersion: v1
data:
  movie_server.py: "import math\nimport grpc\nfrom concurrent import futures\nimport random\nimport movie_pb2\nimport movie_pb2_grpc\nfrom types import SimpleNamespace\nfrom pymongo import MongoClient\n\nclient = MongoClient(\"mongodb://mongodb:27017/\")\ndb = client[\"cloudy_movies\"]\nmovies_collection = db[\"movies\"]\ngenres_collection = db[\"genres\"]\nthemes_collection = db[\"themes\"]\ncrew_collection = db[\"crew\"]\nactors_collection = db[\"actors\"]\nposter_collection = db[\"posters\"]\n\nclass MovieService(movie_pb2_grpc.MovieServiceServicer):\n    #So retorna o nome e id dos filmes\n    def GetAllMovies(self, request, context):\n        return movies_collection.find({}, {\"_id\": 1, \"name\": 1})\n\n    def GetRandomMovie(self, request, context):\n        \n        while True:\n            movie = movies_collection.aggregate([{\"$sample\": {\"size\": 1}}]).next()\n            id = movie[\"id\"]\n            poster = poster_collection.find_one({\"id\": id})\n            actors = actors_collection.find({\"id\": id})\n            genres = genres_collection.find({\"id\": id})\n            crew = crew_collection.find({\"id\": id})\n            theme = themes_collection.find({\"id\": id})\n\n            if (movie and \"rating\" in movie and movie[\"rating\"] is not None and not math.isnan(movie[\"rating\"]) and poster and \"link\" in poster):\n                return movie_pb2.Movie(\n                    movieId=int(movie[\"id\"]),\n                    title=str(movie[\"name\"]),\n                    year=int(movie[\"date\"]),\n                    tagline=str(movie[\"tagline\"]),\n                    description=str(movie[\"description\"]),\n                    duration=int(movie[\"minute\"]),\n                    rating=float(movie[\"rating\"]),\n                    poster=str(poster[\"link\"])\t\n                )\n\n    def CreateMovie(self, request, context):\n        id = movies_collection.count_documents({}) + 1000000 + 1\n        movie_data = {\n            \"id\": id,\n            \"name\": request.title,\n            \"date\": request.year,\n            \"tagline\": request.tagline,\n            \"description\": request.description,\n            \"minute\": request.minutes,\n            \"rating\": request.rating\n        }\n        genre_data = {\n            \"id\": id,\n            \"genre\": request.genre\n        }\n        theme_data = {\n            \"id\": id,\n            \"theme\": request.theme\n        }\n        crew_data = {\n            \"id\": id,\n            \"role\": request.role,\n            \"name\": request.crewName,\n        }\n        actor_data = {\n            \"id\": id,\n            \"role\": request.role,\n            \"name\": request.actorName,\n        }\n        movies_collection.insert_one(movie_data)\n        genres_collection.insert_one(genre_data)\n        themes_collection.insert_one(theme_data)\n        crew_collection.insert_one(crew_data)\n        actors_collection.insert_one(actor_data)\n        return movie_pb2.Empty()\n\n    def GetMovieById(self, request, context):\n        print(\"Pedido de filme recebido: \", request.movieId)\n        while True:\n            movie = movies_collection.find_one({\"id\": request.movieId})\n            poster = poster_collection.find_one({\"id\": request.movieId})\n            actors = actors_collection.find({\"id\": request.movieId})\n            genres = genres_collection.find({\"id\": request.movieId})\n            crew = crew_collection.find({\"id\": request.movieId})\n            theme = themes_collection.find({\"id\": request.movieId})\n\n            if (movie and \"rating\" in movie and movie[\"rating\"] is not None and not math.isnan(movie[\"rating\"]) and poster and \"link\" in poster):\n                break\n\n            request.movieId = 1000000 + random.randint(1, 82447)\n        return movie_pb2.Movie(\n            movieId=int(movie[\"id\"]),\n            title=str(movie[\"name\"]),\n            year=int(movie[\"date\"]),\n            tagline=str(movie[\"tagline\"]),\n            description=str(movie[\"description\"]),\n            duration=int(movie[\"minute\"]),\n            rating=float(movie[\"rating\"]),\n            poster=str(poster[\"link\"])\t\n        )\n\ndef serve():\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    movie_pb2_grpc.add_MovieServiceServicer_to_server(MovieService(), server)\n    server.add_insecure_port('[::]:50052')\n    print(\"Movie server is running on port 50052...\")\n    server.start()\n    server.wait_for_termination()\n\nif __name__ == \"__main__\":\n    serve()\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: movie-service
  name: movie-service-cm1
