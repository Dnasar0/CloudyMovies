apiVersion: v1
data:
  tournament_server.py: "import os\nimport threading\nfrom flask import Flask\nimport grpc\nfrom concurrent import futures\nimport tournament_pb2\nimport tournament_pb2_grpc\nfrom pymongo import MongoClient\nfrom bson import ObjectId\n\napp = Flask(__name__)\n\n@app.route('/healthz')\ndef healthz():\n    return \"OK\", 200\n\ndef run_health_server():\n    app.run(host='0.0.0.0', port=8080)\n\nusername = os.environ[\"DB_USER\"]\npassword = os.environ[\"DB_PASS\"]\n\nclient = MongoClient(\n    f\"mongodb+srv://{username}:{password}@cluster0.o6uzq0y.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\"\n)\n\ndb = client[\"cloudy_movies\"]\ntournaments_collection = db[\"tournaments\"]\n\nclass TournamentServiceServicer(tournament_pb2_grpc.TournamentServiceServicer):\n    def CreateTournament(self, request, context):\n        \n        print(\"Creating tournament...\")\n        try:        \n            tournament_data = {\n                \n                \"date\" : request.date,\n                \"name\" : request.name,\n                \"creator\" : request.creator,\n                \"prize\" : request.prize,\n                \"players\" : [{\n                    \"username\" : player.username\n                } for player in request.players]\n            }\n            print(tournament_data)\n            \n            result = tournaments_collection.insert_one(tournament_data)\n            \n            if result.inserted_id:\n                print(f\"Created tournament with ID: {result.inserted_id}\")\n                return tournament_pb2.Empty()\n            \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error creating tournament: {str(e)}\")\n            return tournament_pb2.Empty()        \n\n    def GetTournament(self, request, context):\n        \n        try:\n            tournament_id = ObjectId(request.id)\n            tournament = tournaments_collection.find_one({\"_id\": tournament_id})\n            \n            if tournament:\n                return tournament_pb2.Tournament(\n                    id=str(tournament[\"_id\"]),\n                    date=tournament[\"date\"],\n                    name=tournament[\"name\"],\n                    creator=tournament[\"creator\"],\n                    prize=tournament[\"prize\"],\n                    players=[tournament_pb2.Player(\n                        username=player[\"username\"],\n                        highScore=player[\"highScore\"]\n                    ) for player in tournament[\"players\"]]\n                )\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Tournament not found\")\n                return None\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error retrieving tournament: {str(e)}\")\n            return None\n\n    def UpdateTournament(self, request, context):\n        \n        try:\n            tournament_id = ObjectId(request.id)\n            tournament = tournaments_collection.find_one_and_update(\n                {\"_id\": tournament_id},\n                {\n                    \"$set\": {\n                        \"date\": request.date,\n                        \"name\": request.name,\n                        \"creator\": request.creator,\n                        \"prize\": request.prize,\n                        \"players\": [{\n                            \"username\": player.username,\n                            \"highScore\": player.highScore\n                        } for player in request.players]\n                    }\n                },\n                return_document=True\n            )\n            if tournament:\n                print(f\"Updated tournament with ID: {request.id}\")\n                return tournament_pb2.Empty()\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Tournament not found\")\n                return tournament_pb2.Empty()\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error updating tournament: {str(e)}\")\n            return tournament_pb2.Empty()\n\n\n    def DeleteTournament(self, request, context):\n        \n        try:\n            tournament_id = ObjectId(request.id)\n            result = tournaments_collection.delete_one({\"_id\": tournament_id})\n            if result.deleted_count > 0:\n                return tournament_pb2.Empty()\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Tournament not found\")\n                return tournament_pb2.Empty()\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error deleting tournament: {str(e)}\")\n            return tournament_pb2.Empty()\n        \n    def ListTournaments(self, request, context):\n        try:\n            tournaments = tournaments_collection.find()\n            tournament_list = tournament_pb2.TournamentList()\n\n# Add all tournaments to the protobuf message\n            for data in tournaments:\n                tournament = tournament_list.tournaments.add()\n                tournament.id = str(data.get(\"_id\", \"\"))\n                tournament.date = data.get(\"date\", \"\")\n                tournament.name = data.get(\"name\", \"Unknown Tournament\")\n                tournament.creator = data.get(\"creator\", \"Unknown\")\n                tournament.prize = data.get(\"prize\", 0)\n\n                for player_data in data.get(\"players\", []):\n                    player = tournament.players.add()\n                    player.id = player_data.get(\"id\", \"\")\n                    player.username = player_data.get(\"username\", \"\")\n            return tournament_list\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error listing tournaments: {str(e)}\")\n\n    def JoinTournament(self, request, context):\n        try:\n            tournament_id = ObjectId(request.tournament_id)  # Fix field name\n            new_player = {\"username\": request.player.username}  # Fix access to player username\n            \n            result = tournaments_collection.update_one(\n                {\"_id\": tournament_id},\n                {\"$push\": {\"players\": new_player}}  # Push new player to the players array\n            )\n\n            if result.modified_count > 0:\n                print(f\"Player {request.player.username} joined tournament {request.tournament_id}\")\n                return tournament_pb2.Empty()\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Tournament not found or player already in tournament\")\n                return tournament_pb2.Empty()\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error joining tournament: {str(e)}\")\n            return tournament_pb2.Empty()\n        \n\ndef serve():\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    tournament_pb2_grpc.add_TournamentServiceServicer_to_server(TournamentServiceServicer(), server)\n    server.add_insecure_port('[::]:50053')\n    print(\"Tournament server is running on port 50053...\")\n    server.start()\n    server.wait_for_termination()\n\nif __name__ == '__main__':\n    threading.Thread(target=run_health_server, daemon=True).start()\n    serve()\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: tournament-service
  name: tournament-service-cm1
