apiVersion: v1
data:
  account_server.py: "import os\nimport threading\nimport grpc\nfrom concurrent import futures\nimport account_pb2\nimport account_pb2_grpc\nfrom pymongo import MongoClient\nfrom bson import ObjectId\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/healthz')\ndef healthz():\n    return \"OK\", 200\n\ndef run_health_server():\n    app.run(host='0.0.0.0', port=8080)\n\nusername = os.environ[\"DB_USER\"]\npassword = os.environ[\"DB_PASS\"]\n\nclient = MongoClient(\n    f\"mongodb+srv://{username}:{password}@cluster0.o6uzq0y.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\"\n)\ndb = client[\"cloudy_movies\"]\naccounts_collection = db[\"accounts\"]\n\nclass AccountServiceServicer(account_pb2_grpc.AccountServiceServicer):\n    def CreateAccount(self, request, context):\n        try:\n            account_data ={\n                \"username\": request.username,\n                \"password\": request.password,\n                \"highScore\": 0,\n                \"account_type\": request.account_type\n            }\n            result = accounts_collection.insert_one(account_data)\n            if result.inserted_id:\n                    print(f\"Created account with ID: {result.inserted_id}\")\n                    return account_pb2.Empty()\n            \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error creating account: {str(e)}\")\n            return account_pb2.Empty()            \n\n    def GetAccount(self, request, context):\n        print(f\"Retrieving account for username: {request.username}\")\n        try:\n            account_name = request.username\n            account = accounts_collection.find_one({\"username\": account_name})\n            if account:\n                return account_pb2.Account(\n                    username=str(account[\"username\"]),\n                    password=str(account[\"password\"]),\n                    highScore=int(account[\"highScore\"]),\n                    account_type=str(account[\"account_type\"])\n                )\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Account not found\")\n                return None\n            \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error retrieving account: {str(e)}\")\n            return None \n\n    def UpdateAccount(self, request, context):\n        try:\n            account_id = ObjectId(request.id)\n            account = accounts_collection.find_one_and_update(\n                {\"_id\": account_id},\n                {\"$set\": {\n                    \"username\": request.username,\n                    \"password\": request.password,\n                    \"highScore\": request.highScore,\n                    \"account_type\": request.account_type\n                }}\n            )\n            if account:\n                print(f\"Updated Account with ID: {request.id}\")\n                return account_pb2.Empty()\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Account not found\")\n                return account_pb2.Empty()\n            \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error updating Account: {str(e)}\")\n            return account_pb2.Empty()    \n\n    def DeleteAccount(self, request, context):\n        try:\n            account_id = ObjectId(request.id)\n            result = accounts_collection.delete_one({\"_id\": account_id})\n            if result.deleted_count == 0:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Account not found\")\n                return account_pb2.Empty()\n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error deleting account: {str(e)}\")\n            return account_pb2.Empty()    \n        # Handle account deletion logic\n\n    def UpdateHighScore(self, request, context):\n        try:\n            account = accounts_collection.find_one({\"username\": request.username})\n            if not account:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"User not found\")\n                return account_pb2.Empty()\n\n            # Only update if the new score is higher\n            if request.highScore > account.get(\"highScore\", 0):\n                accounts_collection.update_one(\n                    {\"username\": request.username},\n                    {\"$set\": {\"highScore\": request.highScore}}\n                )\n                print(f\"High score updated for {request.username} to {request.highScore}\")\n            else:\n                print(f\"High score NOT updated for {request.username}, lower score provided.\")\n\n            return account_pb2.Empty()\n        \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error updating high score: {str(e)}\")\n            return account_pb2.Empty()\n\n    def UpdateAccountType(self, request, context):\n        try:\n            account_id = ObjectId(request.id)\n            account = accounts_collection.find_one_and_update(\n                {\"_id\": account_id},\n                {\"$set\": {\n                    \"account_type\": request.account_type\n                }}\n            )\n            if account:\n                print(f\"Updated Account with ID: {request.id}\")\n                return account_pb2.Empty()\n            else:\n                context.set_code(grpc.StatusCode.NOT_FOUND)\n                context.set_details(\"Account not found\")\n                return account_pb2.Empty()\n            \n        except Exception as e:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(f\"Error updating Account: {str(e)}\")\n            return account_pb2.Empty()       \n\ndef serve():\n    # Connect to MongoDB (replace with your MongoDB URI if needed)\n    \n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    account_pb2_grpc.add_AccountServiceServicer_to_server(AccountServiceServicer(), server)\n    server.add_insecure_port('[::]:50051')\n    print(\"Account server is running on port 50051...\")\n    server.start()\n    server.wait_for_termination()\n\nif __name__ == '__main__':\n    threading.Thread(target=run_health_server, daemon=True).start()    \n    serve()"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: account-service
  name: account-service-cm1
