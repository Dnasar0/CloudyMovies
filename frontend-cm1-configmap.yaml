apiVersion: v1
data:
  game.py: "from datetime import datetime\nimport os\n\nimport grpc\nfrom flask import Flask, jsonify, render_template, request\nfrom flask_cors import CORS\nfrom movie_pb2_grpc  import MovieServiceStub \nfrom movie_pb2 import MovieRequest, Empty\nfrom account_pb2 import Account, AccountRequest\nfrom account_pb2_grpc import AccountServiceStub\nfrom tournament_pb2 import Tournament, JoinTournamentRequest\nfrom tournament_pb2_grpc import TournamentServiceStub\n\n\napp = Flask(__name__)\n\n@app.route('/healthz')\ndef healthz():\n    return \"OK\", 200\n    \nCORS(app)\napp.debug = True\n\nmovie_connection = grpc.insecure_channel(\"movie-service:50052\")\naccount_connection = grpc.insecure_channel(\"account-service:50051\")\ntournament_connection = grpc.insecure_channel(\"tournament-service:50053\")\naccount_client = AccountServiceStub(account_connection)\nmovie_client = MovieServiceStub(movie_connection)\ntournament_client = TournamentServiceStub(tournament_connection)\n\n@app.route(\"/\")\ndef render_index():\n    return render_template(\"firstScreen.html\")\n\n@app.route(\"/tournament\")\ndef render_tournament():\n    return render_template(\"tournament.html\")\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef create_account():\n    username = request.form[\"username\"]\n    print(username)\n    password = request.form[\"password\"]\n    print(password)\n    account_type = request.form[\"accountType\"]\n    print(account_type)\n\n    try:\n        print(\"Creating account...\")\n        # Call gRPC CreateAccount function\n        account_client.CreateAccount(Account(\n            username=username,  \n            password=password,\n            highScore=0,  # Default high score\n            account_type=account_type\n        ))\n        print(\"Account created successfully!\")\n        return render_tworandom()\n    except grpc.RpcError as e:\n        return f\"Error: {e.details()}\"\n    \n@app.route(\"/updateHighScore\", methods=[\"POST\"])\ndef update_high_score():\n    username = request.json[\"username\"]\n    new_score = request.json[\"highScore\"]\n\n    try:\n        print(f\"Updating high score for {username}...\")\n\n        # Call gRPC UpdateHighScore function\n        account_client.UpdateHighScore(Account(\n            username=username,\n            highScore=new_score\n        ))\n\n        print(\"High score update request sent!\")\n        return jsonify({\"message\": \"High score update request sent!\"}), 200\n\n    except grpc.RpcError as e:\n        return jsonify({\"error\": e.details()}), 500\n\n@app.route(\"/get/<int:given_id>\")\ndef render_homepage(given_id):\n    movie_request = MovieRequest(movieId=given_id)\n    movie_response = movie_client.GetMovieById(movie_request)\n    print(movie_request)\n    return render_template(\n        \"game1Screen.html\",\n        movie=movie_response\n    )\n\n@app.route(\"/getRandom\")\ndef render_random():\n    \n    movie_response = movie_client.GetRandomMovie(request = Empty())\n    #Ver isto ideia era mandar json com infos, web recebe e subsitui valores antigos de movie1 com estes ver como fazer isso\n    movie_data = {\n        'id': movie_response.movieId,\n        'title': movie_response.title,\n        'poster': movie_response.poster,\n        'rating': movie_response.rating,\n        'year': movie_response.year,\n    }\n    print(movie_data)\n    return jsonify(movie_data)\n\n@app.route(\"/getTwoRandom\")\ndef render_tworandom():\n    movie_response1 = movie_client.GetRandomMovie(request = Empty())\n    movie_response2 = movie_client.GetRandomMovie(request = Empty())\n    return render_template(\n        \"gameScreen.html\",\n        movie1=movie_response1,\n        movie2=movie_response2\n    )\n    \n@app.route(\"/getTournaments\", methods=[\"GET\"])\ndef get_tournaments():\n    tournaments_response = tournament_client.ListTournaments(request = Empty())  # Use the correct response object\n    return jsonify([{\n        \"id\": t.id,\n        \"name\": t.name,\n        \"creator\": t.creator,\n        \"prize\": t.prize,\n        \"players\": [{\"username\": p.username} for p in t.players]\n    } for t in tournaments_response.tournaments])  # Access tournaments from TournamentList\n\n\n\n@app.route(\"/createTournament\", methods=[\"POST\"])\ndef create_tournament():\n    data = request.json\n    print(data)\n    tournament_client.CreateTournament(Tournament(\n        date=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),  # Auto-generate date\n        name=data[\"name\"],\n        creator=data[\"creator\"],\n        prize=int(data[\"prize\"]),  # Ensure prize is an integer\n        players=[Account(username=p[\"username\"]) for p in data[\"players\"]]\n    ))\n    return \"Tournament Created\", 200\n\n@app.route(\"/joinTournament\", methods=[\"POST\"])\ndef join_tournament():\n    data = request.json\n    \n    tournament_id = data[\"tournamentId\"]\n    username = data[\"username\"]\n    \n    join_request = JoinTournamentRequest(\n        tournament_id=tournament_id,\n        player=Account(username=username)\n    )\n    \n    tournament_client.JoinTournament(join_request)\n    return \"Joined Tournament\", 200\n\n@app.route(\"/account/<username>\", methods=[\"GET\"])\ndef get_acount(username):\n    accountRequest = AccountRequest(username=username)\n    account_response = account_client.GetAccount(accountRequest)\n    return render_template(\n        \"account.html\",\n        account=account_response\n    )\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=5000)\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: frontend
  name: frontend-cm1
